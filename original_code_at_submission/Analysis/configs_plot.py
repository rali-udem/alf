import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# raw_data = [
# (29.68, 29.94, 32.26),
# ('Impossible', 'Impossible', 'Impossible'),
# (37.1, 37.48, 39.8),
# ('Impossible', 'Impossible', 'Impossible'),
# (38.7, 39.04, 41.59),
# ('Impossible', 'Impossible', 'Impossible'),
# (39.8, 40.12, 42.46),
# ('Impossible', 'Impossible', 'Impossible'),
# (40.75, 41.13, 43.42),
# ('Impossible', 'Impossible', 'Impossible'),
# (29.19, 29.62, 32.17),
# ('Impossible', 'Impossible', 'Impossible'),
# (38.08, 38.52, 41.07),
# ('Impossible', 'Impossible', 'Impossible'),
# (39.57, 40.08, 42.49),
# ('Impossible', 'Impossible', 'Impossible'),
# (40.41, 40.96, 43.1),
# ('Impossible', 'Impossible', 'Impossible'),
# (41.8, 42.32, 44.52),
# ('Impossible', 'Impossible', 'Impossible'),
# (29.57, 29.83, 31.97),
# ('Impossible', 'Impossible', 'Impossible'),
# (36.06, 36.43, 39.16),
# ('Impossible', 'Impossible', 'Impossible'),
# (36.87, 37.33, 39.97),
# ('Impossible', 'Impossible', 'Impossible'),
# (37.57, 37.89, 40.41),
# ('Impossible', 'Impossible', 'Impossible'),
# (37.65, 38.0, 40.4),
# ('Impossible', 'Impossible', 'Impossible'),
# (29.54, 29.91, 32.47),
# ('Impossible', 'Impossible', 'Impossible'),
# (36.66, 37.08, 39.71),
# ('Impossible', 'Impossible', 'Impossible'),
# (37.24, 37.77, 40.43),
# ('Impossible', 'Impossible', 'Impossible'),
# (38.5, 38.93, 41.24),
# ('Impossible', 'Impossible', 'Impossible'),
# (38.52, 39.07, 41.66),
# ('Impossible', 'Impossible', 'Impossible'),
# (39.65, 40.11, 42.76),
# (42.08, 42.35, 45.01),
# (40.29, 40.72, 43.05),
# (43.19, 43.71, 46.37),
# (41.79, 42.15, 44.23),
# (43.42, 43.79, 46.58),
# (40.72, 41.13, 43.48),
# (44.64, 44.99, 47.5),
# (40.34, 40.76, 43.31),
# (44.2, 44.58, 47.16),
# (38.92, 39.3, 41.94),
# (41.5, 41.91, 44.64),
# (39.83, 40.32, 43.22),
# (42.96, 43.22, 45.88),
# (40.14, 40.58, 42.92),
# (43.19, 43.59, 46.29),
# (40.52, 41.07, 43.16),
# (42.4, 43.04, 46.06),
# (41.16, 41.68, 43.88),
# (43.86, 44.2, 46.79),
# (39.3, 39.74, 42.32),
# (42.46, 42.81, 45.62),
# (39.88, 40.38, 42.75),
# (42.61, 42.93, 45.57),
# (40.49, 40.87, 43.27),
# (42.32, 42.9, 45.74),
# (40.66, 41.08, 43.45),
# (42.67, 43.1, 45.45),
# (41.25, 41.68, 44.23),
# (43.04, 43.51, 45.94),
# (39.77, 40.23, 42.32),
# (41.8, 42.32, 44.92),
# (39.97, 40.35, 42.87),
# (42.32, 42.78, 45.1),
# (40.23, 40.78, 43.01),
# (42.93, 43.45, 46.03),
# (41.62, 42.0, 44.49),
# (42.63, 43.16, 45.71),
# (40.58, 41.01, 43.28),
# (43.1, 43.65, 45.85),
# ]
raw_data_gpt = [
(29.68, 29.94, 32.26),
('Impossible', 'Impossible', 'Impossible'),
(37.1, 37.48, 39.8),
('Impossible', 'Impossible', 'Impossible'),
    (38.7, 39.04, 41.59),
('Impossible', 'Impossible', 'Impossible'),
    (39.8, 40.12, 42.46),
('Impossible', 'Impossible', 'Impossible'),
    (40.75, 41.13, 43.42),
('Impossible', 'Impossible', 'Impossible'),
    (29.19, 29.62, 32.17),
('Impossible', 'Impossible', 'Impossible'),
    (38.08, 38.52, 41.07),
('Impossible', 'Impossible', 'Impossible'),
    (39.57, 40.08, 42.49),
('Impossible', 'Impossible', 'Impossible'),
    (40.41, 40.96, 43.1),
('Impossible', 'Impossible', 'Impossible'),
    (41.8, 42.32, 44.52),
('Impossible', 'Impossible', 'Impossible'),
    (29.57, 29.83, 31.97),
('Impossible', 'Impossible', 'Impossible'),
    (36.06, 36.43, 39.16),
('Impossible', 'Impossible', 'Impossible'),
    (36.87, 37.33, 39.97),
('Impossible', 'Impossible', 'Impossible'),
    (37.57, 37.89, 40.41),
('Impossible', 'Impossible', 'Impossible'),
    (37.65, 38.0, 40.4),
('Impossible', 'Impossible', 'Impossible'),
    (29.54, 29.91, 32.47),
('Impossible', 'Impossible', 'Impossible'),
    (36.66, 37.08, 39.71),
('Impossible', 'Impossible', 'Impossible'),
    (37.24, 37.77, 40.43),
('Impossible', 'Impossible', 'Impossible'),
    (38.5, 38.93, 41.24),
('Impossible', 'Impossible', 'Impossible'),
    (38.52, 39.07, 41.66),
('Impossible', 'Impossible', 'Impossible'),
    (39.65, 40.11, 42.76),
(42.66, 43.02, 45.56),
(40.29, 40.72, 43.05),
(43.86, 44.29, 46.7),
(41.79, 42.15, 44.23),
(44.0, 44.41, 46.66),
(40.72, 41.13, 43.48),
(44.52, 45.01, 47.59),
(40.34, 40.76, 43.31),
(43.68, 44.09, 46.38),
(38.92, 39.3, 41.94),
(42.03, 42.5, 45.08),
(39.83, 40.32, 43.22),
(43.51, 43.88, 46.5),
(40.14, 40.58, 42.92),
(44.03, 44.43, 47.1),
(40.52, 41.07, 43.16),
(43.94, 44.26, 47.04),
(41.16, 41.68, 43.88),
(43.77, 44.09, 46.75),
(39.3, 39.74, 42.32),
(42.29, 42.73, 45.66),
(39.88, 40.38, 42.75),
(43.24, 43.68, 46.2),
(40.49, 40.87, 43.27),
(43.02, 43.48, 46.03),
(40.66, 41.08, 43.45),
(43.59, 43.94, 46.34),
(41.25, 41.68, 44.23),
(44.18, 44.7, 46.75),
(39.77, 40.23, 42.32),
(42.32, 42.72, 45.3),
(39.97, 40.35, 42.87),
(41.74, 42.26, 45.01),
(40.23, 40.78, 43.01),
(42.84, 43.33, 45.79),
(41.62, 42.0, 44.49),
(42.63, 43.25, 45.48),
(40.58, 41.01, 43.28),
(43.01, 43.48, 45.91),
]
raw_data_llama3_0 = [
(10.55, 10.84, 12.03),
('Impossible', 'Impossible', 'Impossible'), (17.31, 17.54, 19.07),
('Impossible', 'Impossible', 'Impossible'), (17.79, 18.09, 19.27),
('Impossible', 'Impossible', 'Impossible'), (19.01, 19.33, 20.66),
('Impossible', 'Impossible', 'Impossible'), (19.3, 19.65, 21.16),
('Impossible', 'Impossible', 'Impossible'), (9.36, 9.94, 11.59),
('Impossible', 'Impossible', 'Impossible'), (23.5, 24.03, 25.83),
('Impossible', 'Impossible', 'Impossible'), (24.81, 25.45, 27.21),
('Impossible', 'Impossible', 'Impossible'), (27.07, 27.62, 29.59),
('Impossible', 'Impossible', 'Impossible'), (28.17, 28.78, 30.32),
('Impossible', 'Impossible', 'Impossible'), (9.39, 9.77, 10.72),
('Impossible', 'Impossible', 'Impossible'), (16.41, 16.73, 18.0),
('Impossible', 'Impossible', 'Impossible'), (16.4, 16.63, 18.29),
('Impossible', 'Impossible', 'Impossible'), (18.64, 18.81, 20.87),
('Impossible', 'Impossible', 'Impossible'), (18.95, 19.22, 20.87),
('Impossible', 'Impossible', 'Impossible'), (9.05, 9.45, 11.01),
('Impossible', 'Impossible', 'Impossible'), (23.07, 23.53, 25.24),
('Impossible', 'Impossible', 'Impossible'), (23.54, 23.97, 25.74),
('Impossible', 'Impossible', 'Impossible'), (25.1, 25.54, 27.42),
('Impossible', 'Impossible', 'Impossible'), (26.14, 26.61, 28.11),
('Impossible', 'Impossible', 'Impossible'), (34.29, 34.69, 38.32),
(36.49, 36.93, 40.75),
(37.04, 37.71, 39.94),
(38.72, 39.27, 41.48),
(37.25, 37.83, 40.81),
(38.75, 39.21, 41.83),
(39.45, 40.0, 42.29),
(38.81, 39.39, 42.81),
(38.43, 39.19, 42.41),
(40.03, 40.4, 43.1),
(31.94, 32.73, 38.73),
(33.05, 34.09, 38.66),
(33.33, 34.26, 36.29),
(38.29, 38.61, 40.49),
(33.68, 34.58, 36.06),
(38.49, 39.01, 40.99),
(38.11, 38.9, 40.75),
(39.25, 39.85, 41.74),
(39.62, 40.58, 42.46),
(36.99, 37.48, 39.39),
(32.87, 33.24, 35.07),
(33.74, 34.26, 37.74),
(33.13, 33.53, 36.63),
(34.58, 34.87, 38.29),
(35.02, 35.51, 38.29),
(36.0, 36.47, 38.55),
(35.28, 35.62, 38.81),
(35.53, 36.23, 38.98),
(37.62, 38.03, 40.21),
(35.24, 36.0, 40.14),
(30.7, 31.3, 32.87),
(28.84, 30.12, 31.89),
(36.08, 36.61, 38.78),
(29.42, 30.81, 31.65),
(36.66, 37.16, 39.16),
(31.36, 32.81, 33.54),
(37.88, 38.55, 40.23),
(31.45, 33.19, 33.62),
(38.87, 39.48, 41.1),
(31.85, 33.33, 34.12),
]

raw_data_llama3_1 = [
(4.93, 5.24, 5.83),
('Impossible', 'Impossible', 'Impossible'),
(15.74, 15.97, 17.28),
('Impossible', 'Impossible', 'Impossible'),
(16.76, 17.05, 18.03),
('Impossible', 'Impossible', 'Impossible'),
(16.84, 17.21, 18.0),
('Impossible', 'Impossible', 'Impossible'),
(20.06, 20.37, 21.45),
('Impossible', 'Impossible', 'Impossible'),
(11.08, 11.68, 12.96),
('Impossible', 'Impossible', 'Impossible'),
(25.8, 26.2, 27.88),
('Impossible', 'Impossible', 'Impossible'),
(27.37, 27.8, 29.57),
('Impossible', 'Impossible', 'Impossible'),
(30.84, 31.16, 32.84),
('Impossible', 'Impossible', 'Impossible'),
(29.92, 30.44, 31.94),
('Impossible', 'Impossible', 'Impossible'),
(5.56, 5.74, 6.23),
('Impossible', 'Impossible', 'Impossible'),
(13.02, 13.22, 14.0),
('Impossible', 'Impossible', 'Impossible'),
(14.21, 14.38, 15.13),
('Impossible', 'Impossible', 'Impossible'),
(13.54, 13.74, 14.32),
('Impossible', 'Impossible', 'Impossible'),
(13.19, 13.48, 14.34),
('Impossible', 'Impossible', 'Impossible'),
(10.67, 11.28, 12.06),
('Impossible', 'Impossible', 'Impossible'),
(24.5, 25.13, 26.67),
('Impossible', 'Impossible', 'Impossible'),
(26.64, 27.25, 28.84),
('Impossible', 'Impossible', 'Impossible'),
(27.02, 27.68, 29.39),
('Impossible', 'Impossible', 'Impossible'),
(27.68, 28.15, 29.56),
('Impossible', 'Impossible', 'Impossible'),
(34.15, 34.7, 38.61),
(38.43, 38.79, 41.27),
(38.34, 39.13, 41.3),
(39.86, 40.46, 43.33),
(38.76, 39.65, 42.12),
(40.12, 40.66, 43.19),
(39.25, 39.94, 42.72),
(42.12, 42.64, 44.47),
(40.18, 40.9, 43.71),
(42.84, 43.45, 45.63),
(37.42, 38.7, 41.71),
(38.41, 39.37, 42.58),
(39.63, 40.52, 43.79),
(38.73, 39.45, 44.4),
(38.06, 39.65, 44.55),
(41.92, 43.19, 45.62),
(39.86, 41.16, 43.88),
(40.7, 41.45, 44.49),
(38.08, 39.53, 45.51),
(41.04, 42.21, 46.46),
(34.64, 35.19, 36.81),
(37.3, 37.57, 39.74),
(35.13, 35.68, 37.91),
(37.1, 37.45, 39.66),
(36.23, 36.9, 38.46),
(38.41, 38.93, 40.75),
(36.79, 37.04, 38.96),
(39.16, 39.62, 41.6),
(37.74, 38.35, 39.85),
(39.1, 39.45, 41.27),
(32.0, 33.07, 35.91),
(37.08, 37.71, 41.01),
(37.92, 38.81, 40.43),
(39.27, 39.83, 41.74),
(37.31, 38.84, 40.32),
(41.19, 41.89, 43.59),
(39.36, 40.43, 42.03),
(40.7, 41.39, 43.71),
(39.97, 41.04, 42.78),
(41.94, 42.73, 44.75),
]

raw_data_qwen = [
(25.59, 26.09, 28.81),
('Impossible', 'Impossible', 'Impossible'),
(35.77, 36.38, 39.8),
('Impossible', 'Impossible', 'Impossible'),
(37.13, 37.79, 41.42),
('Impossible', 'Impossible', 'Impossible'),
(38.06, 38.95, 41.92),
('Impossible', 'Impossible', 'Impossible'),
(38.84, 39.83, 42.72),
('Impossible', 'Impossible', 'Impossible'),
(24.81, 25.33, 28.34),
('Impossible', 'Impossible', 'Impossible'),
(35.54, 36.12, 39.28),
('Impossible', 'Impossible', 'Impossible'),
(36.23, 36.9, 39.89),
('Impossible', 'Impossible', 'Impossible'),
(37.6, 38.35, 41.39),
('Impossible', 'Impossible', 'Impossible'),
(38.29, 39.07, 42.64),
('Impossible', 'Impossible', 'Impossible'),
(25.36, 25.63, 28.58),
('Impossible', 'Impossible', 'Impossible'),
(34.23, 34.81, 38.21),
('Impossible', 'Impossible', 'Impossible'),
(34.58, 35.1, 38.61),
('Impossible', 'Impossible', 'Impossible'),
(36.18, 36.78, 40.12),
('Impossible', 'Impossible', 'Impossible'),
(37.59, 38.08, 41.08),
('Impossible', 'Impossible', 'Impossible'),
(25.48, 25.94, 29.07),
('Impossible', 'Impossible', 'Impossible'),
(34.37, 35.01, 38.29),
('Impossible', 'Impossible', 'Impossible'),
(35.1, 35.86, 39.04),
('Impossible', 'Impossible', 'Impossible'),
(36.58, 37.28, 40.84),
('Impossible', 'Impossible', 'Impossible'),
(37.45, 38.06, 41.48),
('Impossible', 'Impossible', 'Impossible'),
(39.57, 40.18, 45.45),
(41.28, 42.49, 48.26),
(41.92, 42.35, 47.71),
(44.2, 45.16, 50.12),
(41.6, 42.44, 48.09),
(44.03, 45.07, 50.21),
(41.54, 42.38, 48.29),
(45.27, 46.32, 51.07),
(41.86, 42.67, 48.35),
(44.17, 45.19, 50.81),
(38.08, 38.78, 46.87),
(42.96, 43.94, 49.21),
(42.26, 42.99, 47.71),
(43.66, 44.93, 50.52),
(43.02, 43.94, 48.23),
(44.87, 45.88, 50.67),
(43.19, 44.03, 48.73),
(45.33, 46.35, 51.39),
(43.79, 44.7, 49.05),
(45.68, 46.61, 51.05),
(36.06, 37.01, 41.97),
(38.15, 38.98, 44.72),
(37.31, 38.06, 43.63),
(40.43, 41.22, 46.0),
(37.04, 37.88, 43.77),
(39.68, 40.55, 46.72),
(37.74, 38.72, 44.64),
(41.3, 42.03, 47.34),
(39.51, 40.37, 45.62),
(40.66, 41.65, 47.33),
(37.54, 38.41, 43.04),
(40.81, 41.48, 46.32),
(41.19, 41.8, 46.29),
(42.17, 42.84, 47.45),
(39.04, 40.11, 45.48),
(41.22, 41.97, 48.11),
(40.58, 41.39, 45.77),
(43.1, 43.97, 48.26),
(40.55, 42.03, 46.2),
(42.21, 42.84, 48.46),
]


raw_data = raw_data_gpt


def extract_ith_element(alist, p=2):
    ith_elements = [
        elem[p] if elem[p] != 'Impossible' else None for elem in alist
    ]

    return ith_elements



# Sample data
data = {
    "History": ["no"] * 40 + ["yes"] * 40,
    "Simple or Complex": 2 * (20 * ["simple"] + 20 * ["complex"]),
    "Language": 4 * (10 * ["English"] + 10 * ["French"]),
    "k-shot": 8 * [0, 0, 3, 3, 5, 5, 7, 7, 10, 10],
    "Feedback": 40 * ["no", "yes"],
    # "Weighted Avg": [
    #     32.03, None, 39.28, None, 42.29, None,
    #     31.9, None, 40.12, None, 42.67, None,
    #     31.53, None, 38.55, None, 39.86, None,
    #     33.19, None, 38.98, None, 41.80, None,
    #     42.38, 44.87, 44.29, 45.97, 44.46, 47.42,
    #     42.03, 45.63, 42.64, 45.83, 44.29, 47.45,
    #     42.03, 44.81, 43.04, 45.94, 43.92, 46.55,
    #     42.09, 44.41, 43.62, 45.01, 44.93, 46.35
    # ]
    "Weighted Avg": extract_ith_element(raw_data)
}

# Create DataFrame
df = pd.DataFrame(data)



# Replace None with NaN to handle missing values
df['Weighted Avg'] = pd.to_numeric(df['Weighted Avg'], errors='coerce')

# Calculate averages

averages = {
    'Hist:0': df[df['History'] == 'no']['Weighted Avg'].mean(),
    'Hist:1': df[df['History'] == 'yes']['Weighted Avg'].mean(),
    'Pr:d': df[df['Simple or Complex'] == 'simple']['Weighted Avg'].mean(),
    'Pr:e': df[df['Simple or Complex'] == 'complex']['Weighted Avg'].mean(),
    'L:en': df[df['Language'] == 'English']['Weighted Avg'].mean(),
    'L:fr': df[df['Language'] == 'French']['Weighted Avg'].mean(),
    '0-shot': df[df['k-shot'] == 0]['Weighted Avg'].mean(),
    '3-shot': df[df['k-shot'] == 3]['Weighted Avg'].mean(),
    '5-shot': df[df['k-shot'] == 5]['Weighted Avg'].mean(),
    '7-shot': df[df['k-shot'] == 7]['Weighted Avg'].mean(),
    '10-shot': df[df['k-shot'] == 10]['Weighted Avg'].mean(),
    'Fb:0': df[df['Feedback'] == 'no']['Weighted Avg'].mean(),
    'Fb:1': df[df['Feedback'] == 'yes']['Weighted Avg'].mean(),
}

# Calculate standard deviations
std_devs = {
    'Hist:0': df[df['History'] == 'no']['Weighted Avg'].std(),
    'Hist:1': df[df['History'] == 'yes']['Weighted Avg'].std(),
    'Pr:d': df[df['Simple or Complex'] == 'simple']['Weighted Avg'].std(),
    'Pr:e': df[df['Simple or Complex'] == 'complex']['Weighted Avg'].std(),
    'L:en': df[df['Language'] == 'English']['Weighted Avg'].std(),
    'L:fr': df[df['Language'] == 'French']['Weighted Avg'].std(),
    '0-shot': df[df['k-shot'] == 0]['Weighted Avg'].std(),
    '3-shot': df[df['k-shot'] == 3]['Weighted Avg'].std(),
    '5-shot': df[df['k-shot'] == 5]['Weighted Avg'].std(),
    '7-shot': df[df['k-shot'] == 7]['Weighted Avg'].std(),
    '10-shot': df[df['k-shot'] == 10]['Weighted Avg'].std(),
    'Fb:0': df[df['Feedback'] == 'no']['Weighted Avg'].std(),
    'Fb:1': df[df['Feedback'] == 'yes']['Weighted Avg'].std(),
}

# Prepare data for plotting
labels = list(averages.keys())
values = list(averages.values())
errors = list(std_devs.values())

# Create the bar graph
fig, ax = plt.subplots(figsize=(12, 6))
x = np.arange(len(labels))
width = 0.35

# Define colors for related categories
colors = [
    '#A2C2E0', '#6B95C5',  # No History, Yes History
    '#B2E2B2', '#4CAF50',  # Simple, Complex
    '#FFD700', '#FFA500',  # English, French
    '#FF9999', '#FF7777', '#FF5555', "#FF3333", "#FF1111",  # k-shot 0, 3, 5, 7, 10
    "violet", "purple"
]



# Create bars with appropriate colors and error bars
bars = ax.bar(x, values, width, color=colors, yerr=errors, capsize=5, ecolor="black")

# Add text annotations
for bar in bars:
    yval = bar.get_height()
    ax.text(bar.get_x() + bar.get_width() / 2, yval, round(yval, 2), ha='center', va='bottom')


# Customize the plot
# ax.set_xlabel('Categories', fontsize=14)
ax.set_ylabel('Accuracy (CM)', fontsize=14)
ax.set_xticks(x)
ax.set_xticklabels(labels, rotation=45, ha='right', fontsize=24)
ax.yaxis.grid(True)

# Increase y-axis number size
ax.tick_params(axis='y', labelsize=16)

# Show the plot
plt.ylim(bottom=30)
plt.tight_layout()
plt.show()
